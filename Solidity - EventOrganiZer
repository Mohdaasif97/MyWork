// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract EventOrganizer{
    struct Event{
        address organizer;
        string name;
        uint date;
        uint price;
        uint ticketcount;
        uint ticketRemain;
    }
    mapping (uint => Event) public events;
    mapping (address=>mapping(uint=>uint)) public tickets;
    uint public nextId;

    function createEvent(string memory name,uint date,uint price,uint ticketcount) external{
        require(date>block.timestamp,"you can organize event for future");
        require(ticketcount>0,"tickets should me more than zero");

        events[nextId]=Event(msg.sender,name,date,price,ticketcount,ticketcount);
        nextId++;


    }
    function buyTicket(uint id,uint quantity) external payable {
       require(events[id].date!=0,"This event does not exist ");
       require(events[id].date>block.timestamp,"Event has already Occured");
       Event storage _event=events[id];
       require (msg.value>=(_event.price*quantity),"ethers is not enough");
       require(_event.ticketRemain>=quantity,"Not enough tickets");
       _event.ticketRemain-=quantity;
       tickets[msg.sender][id]+=quantity;


    }
    function transferticket(uint id,uint quantity,address to) external{

        require(events[id].date!=0,"This event does not exist ");
        require(events[id].date>block.timestamp,"Event has already Occured");
        require(tickets[msg.sender][id]>=quantity,"you do not enough money ");
        tickets[msg.sender][id]-=quantity;
        tickets[to][id]+=quantity;


    }

}
