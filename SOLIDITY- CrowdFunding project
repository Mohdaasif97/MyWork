// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.7.0 <0.9.0;

contract CrowdFunding {
    mapping(address => uint256) public contributors;
    address public manager;
    uint256 public MinimumContribution;
    uint256 public DeadLine;
    uint256 public target;
    uint256 public raisedAmount;
    uint256 public noOfContributors;
    struct Request {
        string description;
        address payable recipient;
        uint256 value;
        bool completed;
        uint256 noOfvoters;
        mapping(address => bool) voters;
    }

    mapping(uint256 => Request) public request;
    uint256 public numRequest;

    constructor(uint256 _target, uint256 _Deadline) {
        target = _target;
        DeadLine = block.timestamp + _Deadline;
        MinimumContribution = 100 wei;
        manager = msg.sender;
    }

    function sendeth() public payable {
        require(
            block.timestamp < DeadLine,
            "Deadline has passed you Cannot send ether"
        );
        require(
            msg.value >= MinimumContribution,
            "Get some Money bro atleast more than 100 wei"
        );

        if (contributors[msg.sender] == 0) {
            noOfContributors++;
        }

        contributors[msg.sender] += msg.value;
        raisedAmount += msg.value;
    }

    function getContractBalance() public view returns (uint256) {
        return address(this).balance;
    }

    function refund() public {
        require(
            block.timestamp > DeadLine && raisedAmount < target,
            "Not Eligible for refund"
        );
        require(contributors[msg.sender] > 0);
        address payable user = payable(msg.sender);
        user.transfer(contributors[msg.sender]);
        contributors[msg.sender] = 0;
    }

    modifier OnlyManager() {
        require(msg.sender == manager, "only manager can call this function");
        _;
    }

    function createRequest(
        string memory _description,
        address payable _recipient,
        uint256 _value
    ) public OnlyManager {
        Request storage newRequest = request[numRequest];
        numRequest++;
        newRequest.description = _description;
        newRequest.recipient = _recipient;
        newRequest.value = _value;
        newRequest.completed = false;
        newRequest.noOfvoters = 0;
    }

    function voteRequest(uint256 _requestNo) public {
        require(contributors[msg.sender] > 0, " you are not a contributor");
        Request storage thisRequest = request[_requestNo];
        require(
            thisRequest.voters[msg.sender] == false,
            "you have already Voted"
        );
        thisRequest.voters[msg.sender] = true;
        thisRequest.noOfvoters++;
    }

    function makePayment(uint256 _requestno) public OnlyManager {

        require(raisedAmount >= target);
        Request storage thisRequest = request[_requestno];
        require(thisRequest.completed == false, "request has been completed");
        require(thisRequest.noOfvoters>noOfContributors/2,"majaority does not support");
        thisRequest.recipient.transfer(thisRequest.value);
        thisRequest.completed=true;

    }
}
